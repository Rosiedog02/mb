#include "ReShade.fxh"
#include "ReShadeUI.fxh"

struct VS_INPUT
{
    float4 Pos : SV_POSITION;
    float2 TexCoord : TEXCOORD0;
};


uniform float UI_BLUR_AMOUNT <
ui_type = "drag";
ui_label = "Blur Amount";
ui_min = 0.0;
ui_max = 10.0;
ui_tooltip = "Amount of blur applied to the motion vectors.";
ui_category = "Motion Blur";
> = 1.0;

uniform int UI_BLUR_DIRECTION <
ui_type = "combo";
ui_label = "Blur Direction";
ui_items = "Horizontal\0Vertical\0Both\0";
ui_tooltip = "Direction in which the blur is applied.";
ui_min = 0;
ui_max = 2;
ui_category = "Motion Blur";
> = 2;

uniform float2 OutputResolution;

// Textures & Samplers
texture2D texColor : COLOR;
sampler samplerColor { Texture = texColor; AddressU = Clamp; AddressV = Clamp; MipFilter = Linear; MinFilter = Linear; MagFilter = Linear; };

texture texMotionVectors { Width = BUFFER_WIDTH; Height = BUFFER_HEIGHT; Format = RG16F; };
sampler SamplerMotionVectors2 { Texture = texMotionVectors; AddressU = Clamp; AddressV = Clamp; MipFilter = Point; MinFilter = Point; MagFilter = Point; };

// Main Pixel Shader Function
float4 PS_Main(VS_INPUT input) : SV_Target
{
    float blurAmount = UI_BLUR_AMOUNT / OutputResolution.x * 2.0;
    float4 color = tex2D(samplerColor, input.TexCoord);
    float2 motion = tex2D(SamplerMotionVectors2, input.TexCoord).xy;

    float2 offset = 0;
    if (UI_BLUR_DIRECTION == 0) // horizontal
        offset = float2(motion.x * blurAmount, 0);
    else if (UI_BLUR_DIRECTION == 1) // vertical
        offset = float2(0, motion.y * blurAmount);
    else if (UI_BLUR_DIRECTION == 2) // both
        offset = motion * blurAmount;

    // Apply Gaussian Blur
    color = 0.25 * tex2D(samplerColor, input.TexCoord - offset) +
            0.5 * tex2D(samplerColor, input.TexCoord) +
            0.25 * tex2D(samplerColor, input.TexCoord + offset);

    return color;
}

// Vertex Shader Function
float4 VS_Main(VS_INPUT input) : SV_POSITION
{
    return float4(input.Pos.xy, 0, 1);
}

//Technique
technique MotionBlur
{
   pass 
{
    VertexShader = VS_Main;
    PixelShader = PS_Main;
}
}

